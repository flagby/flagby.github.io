变量的同步赋值：变量1，变量2=值1，值2
21:57 2021/3/2121:57 2021/3/21查询python关键字命令
>>> import keyword
>>> print(keyword.kwlist)
查询内库
pip list

多行注释：...   ...
单行注释: #
 
字符串格式化输出
方式：1.使用占位符 2.format(字符变量)
format是一个字符串函数，字符串.format() 此处的'.'调用，{}用来占位

input()函数输入的数都是字符串类型（str）

用input()函数输入的数做比较运算，它是以字典中的顺序在作比较的，例如："8>12"返回的值是“True”
is  用于对象的比较
注意：在用is做比较时，在文件模式下运行的结果可能与在交互式模式下运行的结果不要，因为在交互式模式下运行时是单个去开辟空间，而文件模式下时整块的去开辟空间。如果在交互式模式下输入的整数大于了256用is进行比较时就与在文件模式下运行的结果不一样，当小于256并大于 -5时两个模式下比较的结果是一样的。（小整数-5~256）

bin()是转二进制的函数，当输出时最前面会有一个“0b”的二进制的标志，“0o”时八进制的标志


字节byte = 八个二进制位（bit）         1kb=1024byte   1m=1024kb  
正数转负数=》正数二进制取反加1
负数转正数=》负数减一取补（反码+1）
1111 1011=》-5
1111 1010 =》减一
0101  =》补码
计算机做减法：253-176
=》253+（999-176）+1-（999+1）=》被减数+减数的补码+1-（减数位数的最大数+1）
如：
276-240=36
276+759+1-1000
11111101-10110000=
=》11111101+（11111111-10110000）(补码)+1-(11111111+1)
5                 -5
0101         1011 


for 变量名 in  集合：
range()函数表示范围包前不包后：range（起始数，终止数，步长（step））
pass 空语句

for  else 只要for循环完了才执行else后的语句
for 变量名 in 集合：
	语句
else：
	语句


随机函数：头文件 import  random 
使用 random.randint()


字符串：字符串用 常量赋值时它们的id相同（注意：在用 三引号时保留有多余的格式时它的id会与单引号与双引号的id不一样）
用input()函数赋值时它们的id也 可能不一样
字符串的运算符：
+ ：连接两个字符串

in：在...里面   放回结果是Ture	or  Flase
not  in：不在...里面

%：字符串的格式化  	

r：保留原格式 （针对转义字符）有r就不发生转义否则发生

[](方括号):结合位置	获取某个位子的字母等	特点：只能取一个


例：range（0，5）=》[0：5]
[起始数：终止数]（包前不包后）:截取字符，起始数与终止数都可以省；省前就是从0到终止数，省后就是从起始数到字符串末尾；可以从前到后取也能从后到前取如a=‘123456.txt’print(filename[0:6])与print(filename[-10:-4])结果（123456）是一样的，但是从后向前取时最后一个取不到（起始数与终止数不省略）；省略 起始数和终止数 就是表示全部  



[起始数：终止数:方向和步长]（-1表示倒叙步长为1）  省略 起始数和终止数 就是表示全部   


字符串的内置函数：
第一部分:大小写相关的：
capitalize（）:语句的首字母大写	
title()：每个单词的首字母大写	
istitle():判断每个单词的首字母是否大写	
upper()：全部转换为大写
isupper():判断全部是否转换为大写
lower()：全部转小写
islower():判断全部是否转换为小写
用法：如a  = "afdsafn pdfasd  bdfs"
a.capitalize()
a.title()	...
第二部分：查找与插入相关的
find(要查找的字符，起始位置，终止位置)：找到在字符串中第一次出现的位置
rfind()：从右边开始查找
lfind()：从左边开始查找
index()：插入
rindex()
lindex()
replace(旧的字符，新的的字符，替换的次数)：替换
第三部分：编码与解码 	gbk(中文)		gb2312（简体中文）
encode('编码类型'):编码
decode(’编码类型‘):解码
ord（）：转换为数值（单个编码形式转换）
chr（）：转换为编码形式
第四部分：文件格式
startswith(‘文件类型’):放回类型为True	False；判断是否以xxx开头	应用：文件上传
endswith(‘文件类型’):放回类型为True	F  alse；判断是否以xxx结尾
isalpha():判断是否是字母
isdigit()：判断是否是数字（字符型数字）
join(字符串):加入如     
 a =  '123'
print(a.join("abc"))
结果：a123b123c   
lstrip():去除字符串左侧的空格
rstrip():去除字符串右侧的空格
strip():去除字符串两侧的空格
splist(分割的字符，分割几次):分割字符串；如果	不加次数就分割所有
count():count(args)求args的个数
变量名=[字符串1，字符串2...]：这是链表，在python中的链表与c语言中的数组差不多
del   链表名[下标]：是删除链表中的元素
append：末尾追加
insert：指定位置添加
extend：一次添加多个 元素
remove(e):删除链表中第一次出现的元素e，放回结果为None
pop():弹栈，移除链表中的最后一个元素，返回值为删除的元素
clear():清除链表中的所有元素
sorted(list):排序
list.sort():排序


元组：
类似链表（当成容器）
1.定义的符号：（）
2.元组中的内容不可修改
3.关键字：tuple
链表：[]    [1]	元组：（）（1）


字典（dictionary）：{}
items():把字典转换为链表
values()
keys()
get(key):如果 在字典中找不到key就返回None
get(key,default):如果在字典中找不到key就返回default
update():更新（连接，添加）
dict.fromkeys(list):把链表转为字典，如果没有默认的value就用None替代
集合（set）：
set():创建空集合
add（）：添加一个元素
如果要把重复的值去掉就用set()
update():添加多个元素
pop():随机删除
remove（）:算出元素
dicard（）：丢弃，删除
difference():差集
intersection():交集
union():联合，并集 
symmetric_difference():两个链表中不同的元素


可变变量：同一内存中的值是可变的
链表，字典
def  函数名：定义一个函数
nonlocal：将全局变量强制声明为不是一个全局变量（在闭包内需要声明全局变量才能去改变它的值否则不能修改）
global：在函数中声明局部变量
lambda：创建一个 精简函数如：x：2*x+1 结果：<function <lambda> at 0x000001C15FE14438>
装饰器：
特点：函数是作为参数出现的，它要有闭包的特点出现
装饰函数下面是那个函数就是装饰那个函数
匿名函数：
关键字：lambda
如：s=lambda  a,b:a+b #匿名函数
调用就是：s(1,2)
map():对链表做一些操作

reduce():(要加上from   functools  import reduce)
read():读取所有内容
readline（）：读取一行内容
readlines():读取多行
readable():判断是否可读的
write(内容)：每次都会将原来的内容清空，然后写时的内容
writelines():没有换行效果
os.path.join(源文件路径，目标文件路径)
os.path.dirname(__fille__):获取当前文件的文件目录
os.listdir():判断是否是文件夹



...
文件操作
os模块
import os
os.path
   dirname
   join
   split
   splisttext
   getsize


   isabs
   isdir
   isfile

os
   getcwd()
   chdir()
   listdir()
   mkdir()
   rmdir()
   remove()

...
...
#异常
语法错误：
异常


系统抛出来的异常
list1=[]
lsit1.pop()

处理异常
try:
   可能发生异常的代码
except:
   有异常才会执行的代码
[except 异常类型   as    err:
 ...]
[finally:
    无论有没有异常都会处理的异常]
...


...
抛出异常：
手动抛出异常
格式：
   raise  异常类型（提示信息）：
...


#列表推导式   字典推导式    集合推导式
#旧的 列表-》新列表
1.列表推导式：
	格式:
		[表达式  for  变量  in   旧列表     ]  或   [表达式  for  变量  in   旧列表    if  条件     ]
		 [表达式  for  变量  in   旧列表    if  条件 else  表达式 for   变量   in  旧列表    ]
2.集合推导式
	格式:
		{表达式  for  变量  in   旧列表     } 或   {表达式  for  变量  in   旧列表    if  条件     }
		 {表达式  for  变量  in   旧列表    if  条件 else  表达式 for   变量   in  旧列表    }
得到生成器的方式
1.通过列表推导式得到生成器
yield   变量=》return   变量+暂停
生成器方法：
函数.__next__():下一个元素
函数.send(值)：为函数中送值


threading:线程模块
变量1=threading.Tread(target（线程要执行的代码）=函数名[,args（调用函数时要传递的参数）=(参数,)])：创建线程
变量1.start():调用线程
threading.enumerate():查看线程数
class 类名（threading.Tread）:用于类的线程
变量=threading.Lock():创建互斥锁（默认没有上锁）
变量.acquire():上锁
变量.release():解锁

multiprocessing进程模块
变量1=multiprocessing.Process(target=函数名）
变量1.start（）：调用进程




正则
import  re
re.match("查找到字符串"，源字符串) #只搜索开头，如果没有就返回None
re.findall("查找的字符串"，源字符串)#搜索所有匹配的字符
re.search("查找的字符串"，源字符串)##search 进行 正则字符串匹配的方法，匹配的是整个字符串
re.sub("正则表达"，“新的内容”):替换
re.split(“以什么为切割的依据”，n)"切割

类：
__init__ 构造方法
__new__作用 开辟空间
__del__作用  没有指针引用的时候会调用
__call__ 作用，想不想将对象当成函数使用


类中的方法：
普通方法
def  fun（self）:--》self对象
	pass
类方法
@callmethod
def fun(self):0
	pass
静态方法
@staticmethod
def fun():
	pass
魔术方法
__init__ ,__str__